#include "des.h"

DES::DES(string s)
{
    /*---------------Подготовка-----------------------------------*/
    string prov;
    if(s.length()%8!=0 ){//проверям что делится на блоки или дописываем ~
        for (int i=0;i<s.length()%8;i++) {
            s+="~";
        }
        cout<<"now OK "<<s.length()<<"  "<<s<<endl;
    }else cout<<"OK";

    kl=s.length()/8;// количество повторения цикла
    for (int i=0;i<kl;i++) {
        string v=s;
        s.erase(0,8);


        for (int i=0;i<8;i++) { //переводим символ в 2 и записываем в блок для kl частей
            zam=v[i];
            ish<<=8;
            ish|=zam;
        }
        cout<<endl<<"ish"<<endl<<ish<<endl;
        shifrDes(ish);
    }
}

void DES::shifrDes(bitset<64> ish)
{
    bitset<64> par1("1111111111111111111111111111111100000000000000000000000000000000");//маска для разбиения на 2 группы
    bitset<64> par2("0000000000000000000000000000000011111111111111111111111111111111");
    /*---------------Начало шифрования-----------------------------------*/
    for (int i=0;i<64;i++) { pere[i]=ish[per[i]-1]; } //перестановка шифрующая

    //разбиение на два блока по 32 бита
    Li_1=pere;

    Li_1&=par1;
    Li_1>>=32;

    Ri_1=pere;
    Ri_1&=par2;
    keyFunc();//создли ключ
    // прогоны
    for (int i=1;i<17;i++) {

        Li=Ri_1;
        Ri=Li_1^=fFunc(keyiFunc(i),Ri_1);
        Ri_1=Ri;
        Li_1=Li;

    }
    //соединяем половины
    shf=Li;
    shf<<=32;
    shf|=Ri;

    //конечная перестановка
    for (int i=0;i<64;i++) {
        zam[i]=shf[perObr[i]-1];
    }
    cout<<endl<<"Шиф"<<endl<<zam<<endl;
    rashifrDes(zam);
}

bitset<64> DES::func(bitset<64> pol){
    for (int i=0;i<48;i++) {
        zam[i]=pol[ep[i]-1];
    }
    return zam; }

void DES::keyFunc(){
    string prov;
    string k="98465482"; // ключ исходный

    for (int i=0;i<8;i++) {//перевод ключа в биты с учетом нечетного количества едениц в байте
        zam=k[i];
        if(zam.count()%2 ==0) zam[7]=1;
        key<<=8;
        key|=zam;
    }
}

bitset<64> DES::keyiFunc(int i){
    int sdv[17]={0,1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1};
    int sdvi=sdv[i];
    key=sdvig(key,sdvi);
    bitset<64> keyi;//ключ для i итерации 0-15
    for (int i=0;i<48;i++) {
        keyi[i]=key[perKeyi[i]-1];
    }

    return keyi;
}

bitset<64> DES::keyiFuncS(int i){
    int sdv[17]={0,1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1};
    int sdvi=sdv[i];
    key=sdvigr(key,sdvi);//сдвиг в право
    bitset<64> keyi;//ключ для i итерации 0-15
    for (int i=0;i<48;i++) {
        keyi[i]=key[perKeyi[i]-1];
    }

    return keyi;
}

bitset<64> DES::fFunc(bitset<64> keyi, bitset<64> pol){
    bitset<64> par3("0000000000000000000000000000000000000000000000000000000000111111");
    bitset<64> par4("0000000000000000000000000000000000000000000000000000000000000011");
    bitset<64> a,B;
    int E[48]={32,1,2,3,4,5,4,5,6,7,8,9,8,9,10,11,12,13,12,13,14,15,16,17,16,17,18,19,20,21,20,21,22,23,24,25,24,25,26,27,28,29,28,29,30,31,32,1};
    int P[32]={16,7,20,21,29,12,28,17,1,15,23,26,5,18,31,10,2,8,24,14,32,27,3,9,19,13,30,6,22,11,4,25};
    int S[8][4][16]={{{14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7},{0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8},{4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0},{15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13}},
                     {{15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10},{3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5},{0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15},{13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9}},
                     {{10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8},{13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1},{13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7},{1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12}},
                     {{7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15},{13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9},{10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4},{3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14}},
                     {{2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9},{14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6},{4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14},{11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3}},
                     {{12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11},{10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8},{9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6},{4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13}},
                     {{4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1},{13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6},{1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2},{6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12}},
                     {{13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7},{1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2},{7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8},{2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11}}};

    for (int i=0;i<48;i++) {
        zam[i]=pol[E[i]-1];
    }
    pol^=keyi;//сумма mod2

    bitset<64> b;
    for (int i=0;i<8;i++) {
        a=pol;
        b =a&=par3;
        pol>>=6;


        //stroka
        bitset<64> B0=b;
        B0[1]=B0[5];
        int stroka= (B0&=par4).to_ulong();

        //stolb
        B0=b;
        B0[5]=0;
        int stolb = (B0>>=1).to_ulong();

        b=S[i][stroka][stolb];
        B|=b;
        B<<=4;
    }

    for(int i=0;i<32;i++){
        b[i]=B[P[i]-1];
    }

    return b;
}

bitset<64> DES::sdvig(bitset<64> a, int sd){
    for (int i=0;i<sd;i++) {
        if(a[63]==1) {
            a<<=1;
            a[0]=1;
        }else a<<=1;
    }
    return a;
}

bitset<64> DES::sdvigr(bitset<64> a, int sd){
    for (int i=0;i<sd;i++) {
        if(a[0]==1) {
            a>>=1;
            a[63]=1;
        }else a>>=1;
    }
    return a;
}

void DES::rashifrDes(bitset<64> str){
    bitset<64> par1("1111111111111111111111111111111100000000000000000000000000000000");//маска для разбиения на 2 группы
    bitset<64> par2("0000000000000000000000000000000011111111111111111111111111111111");
    for (int i=0;i<64;i++) { pere[i]=str[per[i]-1];}

    //разбиение на два блока по 32 бита
    Li=pere;

    Li&=par1;
    Li>>=32;

    Ri=pere;
    Ri&=par2;

    // прогоны
    Ri_1=Li;
    Li_1=Ri^=fFunc(keyiFuncS(0),Li);
    Ri=Ri_1;
    Li=Li_1;
    for (int i=15;i>0;i--) {

        Ri_1=Li;
        Li_1=Ri^=fFunc(keyiFuncS(i+1),Li);
        Ri=Ri_1;
        Li=Li_1;

    }
    //соединяем половины

    shf=Li;
    shf<<=32;
    shf|=Ri;

    //конечная перестановка
    for (int i=0;i<64;i++) {
        zam[i]=shf[perObr[i]-1];
    }
    cout<<endl<<"Рас"<<endl<<zam<<endl;

    string newS;
    bitset<64> m("1111111100000000000000000000000000000000000000000000000000000000000000000000");
    for (int i=0;i<8;i++) {
        bitset<64> a=zam;
        a=a&=m;
        newS+=static_cast<char>((a>>=56).to_ulong() );
        zam<<=8;
    }
    cout<<"Ответ"<<endl<<newS<<endl;
}
